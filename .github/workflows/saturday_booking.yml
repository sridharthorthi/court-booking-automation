name: Saturday Court Booking Job

on:
  schedule:
    - cron: '50 9 * * 6'  # Runs at 9:50 AM every Saturday
  workflow_dispatch:  # Allows manual triggering for testing

permissions:
  issues: write

jobs:
  book-courts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium webdriver-manager
        
    - name: Run booking script
      env:
        BOOKING_USERNAME: ${{ secrets.BOOKING_USERNAME }}
        PASSWORD: ${{ secrets.BOOKING_PASSWORD }}
      run: python booking_script.py

    - name: Create Issue on Completion
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const status = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
          
          // Determine the title based on the status content
          let title = '';
          if (status.includes("Successfully booked both")) {
            title = 'üéØ Successfully Booked Both Tuesday and Thursday Slots';
          } else if (status.includes("slots might not be opened yet")) {
            title = '‚è≥ Slots Not Yet Opened - Will Try Again Next Run';
          } else if (status.includes("Partial booking success")) {
            title = '‚ö†Ô∏è Partial Success - Only One Slot Booked';
          } else if (status.includes("slot is fully booked")) {
            title = '‚ùå Slots Already Full';
          } else {
            title = '‚ùå Booking Failed - Check Details';
          }

          // Add timestamp to title
          const timestamp = new Date().toLocaleString('en-US', { timeZone: 'America/Los_Angeles' });
          title += ` (${timestamp})`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: `Running Time: ${timestamp}\n\nDetails:\n${status}`,
            labels: [status.includes("Successfully booked both") ? 'success' : 'failure']
          });

